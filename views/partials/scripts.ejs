<script
  src="https://code.jquery.com/jquery-3.3.1.min.js"
  integrity="sha256-FgpCb/KJQlLNfOu91ta32o/NMZxltwRo8QtmkMRdAu8="
  crossorigin="anonymous"></script>

<script src="https://unpkg.com/popper.js@1.12.6/dist/umd/popper.js" integrity="sha384-fA23ZRQ3G/J53mElWqVJEGJzU0sTs+SvzG8fXVWP+kJQ1lwFAOkcUOysnlKJC33U" crossorigin="anonymous"></script>

<script src="https://cdn.rawgit.com/FezVrasta/snackbarjs/1.1.0/dist/snackbar.min.js"></script>

<script src="https://unpkg.com/bootstrap-material-design@4.1.1/dist/js/bootstrap-material-design.js" integrity="sha384-CauSuKpEqAFajSpkdjv3z9t8E7RlpJ1UP0lKM/+NdtSarroVKu069AlsRPKkFBz9" crossorigin="anonymous"></script>

<script>$(document).ready(function () { $('body').bootstrapMaterialDesign(); });</script>

<script src="https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.22.2/moment.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/underscore.js/1.9.1/underscore.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/mustache.js/2.3.1/mustache.min.js"></script>
<script>
	var initializeEvents = function (keySelector, eventModels) {     
        var $view = $(keySelector);
        _(eventModels).forEach(function (eventModel) {
            $view.on(eventModel.event, eventModel.target, eventModel.callback);
        });
	};

	var Router = {
	    routes: [],
	    mode: null,
	    root: '/',
	    config: function(options) {
	        this.mode = options && options.mode && options.mode == 'history' 
	                    && !!(history.pushState) ? 'history' : 'hash';
	        this.root = options && options.root ? '/' + this.clearSlashes(options.root) + '/' : '/';
	        return this;
	    },
	    getFragment: function() {
	        var fragment = '';
	        if(this.mode === 'history') {
	            fragment = this.clearSlashes(decodeURI(location.pathname + location.search));
	            fragment = fragment.replace(/\?(.*)$/, '');
	            fragment = this.root != '/' ? fragment.replace(this.root, '') : fragment;
	        } else {
	            var match = window.location.href.match(/#(.*)$/);
	            fragment = match ? match[1] : '';
	        }
	        return this.clearSlashes(fragment);
	    },
	    clearSlashes: function(path) {
	        return path.toString().replace(/\/$/, '').replace(/^\//, '');
	    },
	    add: function(re, handler) {
	        if(typeof re == 'function') {
	            handler = re;
	            re = '';
	        }
	        this.routes.push({ re: re, handler: handler});
	        return this;
	    },
	    remove: function(param) {
	        for(var i=0, r; i<this.routes.length, r = this.routes[i]; i++) {
	            if(r.handler === param || r.re.toString() === param.toString()) {
	                this.routes.splice(i, 1); 
	                return this;
	            }
	        }
	        return this;
	    },
	    flush: function() {
	        this.routes = [];
	        this.mode = null;
	        this.root = '/';
	        return this;
	    },
	    check: function(f) {
	        var fragment = f || this.getFragment();
	        for(var i=0; i<this.routes.length; i++) {
	            var match = fragment.match(this.routes[i].re);
	            if(match) {
	                match.shift();
	                this.routes[i].handler.apply({}, match);
	                return this;
	            }           
	        }
	        return this;
	    },
	    listen: function() {
	        var self = this;
	        var current = self.getFragment();
	        var fn = function() {
	            if(current !== self.getFragment()) {
	                current = self.getFragment();
	                self.check(current);
	            }
	        }
	        clearInterval(this.interval);
	        this.interval = setInterval(fn, 50);
	        return this;
	    },
	    navigate: function(path) {
	        path = path ? path : '';
	        if(this.mode === 'history') {
	            history.pushState(null, null, this.root + this.clearSlashes(path));
	        } else {
	            window.location.href = window.location.href.replace(/#(.*)$/, '') + '#' + path;
	        }
	        return this;
	    }
	}

	// configuration
	Router.config({ mode: 'hash'});
</script>